#!/usr/bin/env python3
# -*- coding: utf-8 -*-

'''
My module to plot a serie of files.
'''

import argparse as ap
import os
import sys

import re
from itertools import cycle

import numpy as np
from scipy.signal import savgol_filter

import matplotlib as mpl
from matplotlib import pyplot as plt


def read_columns(fle, columns_list, fmt, skip, xsca, ysca, sg):
    '''
    Reads input file and returns a list
    containing columns' numbers followed
    by array slices containing data.
    '''
    data = np.loadtxt(fle, skiprows=skip)
    output = [fle]
    for pair in columns_list:
        partition = pair[0].split(':')
        x = int(partition[0])
        y = int(partition[1])
        if fmt == 'xydy':
            dy = int(partition[2])
        elif fmt == 'xydx':
            dx = int(partition[2])
        elif fmt == 'xydxdy':
            dx = int(partition[2])
            dy = int(partition[3])
        x_data = xsca*data[:, x-1]
        y_data = ysca*data[:, y-1]
        if sg:
            y_data = savgol_filter(y_data, sg, 3)
        if fmt == 'xy':
            output.append([x, y, x_data, y_data])
        elif fmt == 'xydy':
            dy_data = ysca*data[:, dy-1]
            output.append([x, y, x_data, y_data, dy_data])
        elif fmt == 'xydx':
            dx_data = xsca*data[:, dx-1]
            output.append([x, y, x_data, y_data, dx_data])
        elif fmt == 'xydxdy':
            dx_data = xsca*data[:, dx-1]
            dy_data = ysca*data[:, dy-1]
            output.append([x, y, x_data, y_data, dx_data, dy_data])
    return output


def plot_sep_col(data, fmt, is_log, legend, sy, hline, vline):
    '''
    Makes separated ordered columns
    wise: all 1:2 together, all 1:3 together
    and so on...
    '''
    columns = []
    for d in data:
        for s in d[1:]:
            columns.append([s[0], s[1]])
    for i in range(len(columns)):
        try:
            x = columns[i][0]
            y = columns[i][1]
            j = i
            while True:
                try:
                    j += 1
                    pair = columns[j]
                    if pair[0] == x and pair[1] == y:
                        columns.pop(j)
                except IndexError:
                    break
        except IndexError:
            break

    plot_nb = len(columns)
    if plot_nb % 3 == 0:
        fig, axes = plt.subplots(plot_nb//3, 3, sharex=True, figsize=(20, 10))
    elif plot_nb % 2 == 0:
        fig, axes = plt.subplots(plot_nb//2, 2, sharex=True, figsize=(20, 10))
    else:
        fig, axes = plt.subplots(plot_nb, 1, sharex=True, figsize=(20, 10))
    for pair, ax in zip(columns, axes.flatten()):
        suf = ":".join([str(pair[0]), str(pair[1])])
        for d in data:
            label = d[0]
            for subdata in d[1:]:
                x = subdata[0]
                y = subdata[1]
                if not(x == pair[0] and y == pair[1]):
                    continue
                lab = label
                x_data = subdata[2]
                y_data = subdata[3]
                if fmt == 'xy':
                    ax.plot(x_data, y_data,
                            label=lab,
                            )
                elif fmt == 'xydy':
                    dy = subdata[4]
                    plt.plot(x_data, y_data,
                             label=lab,
                             )
                    up = y_data+dy
                    down = y_data-dy
                    plt.fill_between(
                            x_data, up, down,
                            alpha=0.2,
                            linewidth=0
                            )
                elif fmt == 'xydx':
                    dx = subdata[4]
                    ax.errorbar(x_data, y_data,
                                xerr=dx,
                                capsize=4, capthick=2,
                                label=lab,
                                )
                elif fmt == 'xydxdy':
                    dx = subdata[4]
                    dy = subdata[5]
                    ax.errorbar(x_data, y_data,
                                xerr=dx, yerr=dy,
                                capsize=4, capthick=2,
                                label=lab,
                                )
                if is_log[0]:
                    ax.set_xscale('log')
                if is_log[1]:
                    ax.set_yscale('log')
        for h in hline:
            plt.hlines(y=h, xmin=-np.inf, xmax=np.inf, linestyle='--')
        for v in vline:
            plt.vlines(x=v, ymin=-np.inf, ymax=np.inf, linestyle='--')
        if legend:
            ncol = max([1, len(data)//3])
            ax.legend(loc='upper left', ncol=ncol)
        ax.set(title=suf)

    return [fig, axes]


def plot_sep_fil(data, fmt, is_log, legend, sy, hline, vline):
    plot_nb = len(data)
    if plot_nb % 3 == 0:
        fig, axes = plt.subplots(plot_nb//3, 3, sharex=True, figsize=(20, 10))
    elif plot_nb % 2 == 0:
        fig, axes = plt.subplots(plot_nb//2, 2, sharex=True, figsize=(20, 10))
    else:
        fig, axes = plt.subplots(plot_nb, 1, sharex=True, figsize=(20, 10))
    for d, ax in zip(data, axes.flatten()):
        suf = d[0]
        for subdata in d[1:]:
            x = subdata[0]
            y = subdata[1]
            lab = ":".join([str(x), str(y)])
            x_data = subdata[2]
            y_data = subdata[3]
            if fmt == 'xy':
                ax.plot(x_data, y_data,
                        label=lab,
                        )
            elif fmt == 'xydy':
                dy = subdata[4]
                plt.plot(x_data, y_data,
                         label=lab,
                         )
                up = y_data+dy
                down = y_data-dy
                plt.fill_between(
                        x_data, up, down,
                        alpha=0.2,
                        linewidth=0
                        )
            elif fmt == 'xydx':
                dx = subdata[4]
                ax.errorbar(x_data, y_data,
                            xerr=dx,
                            capsize=4, capthick=2,
                            label=lab,
                            )
            elif fmt == 'xydxdy':
                dx = subdata[4]
                dy = subdata[5]
                ax.errorbar(x_data, y_data,
                            xerr=dx, yerr=dy,
                            capsize=4, capthick=2,
                            label=lab,
                            )
            if is_log[0]:
                ax.set_xscale('log')
            if is_log[1]:
                ax.set_yscale('log')
        for h in hline:
            plt.hlines(y=h, xmin=-np.inf, xmax=np.inf, linestyle='--')
        for v in vline:
            plt.vlines(x=v, ymin=-np.inf, ymax=np.inf, linestyle='--')
        if legend:
            ncol = max([1, len(data)//3])
            ax.legend(loc='upper left', ncol=ncol)
        ax.set(title=suf)

    return [fig, axes]


def plot_data(data, fmt, is_log, legend, names, sy, hline, vline):
    plt.figure(figsize=(40, 30))
    namelist = iter(names)
    ax = plt.gca()
    for h in hline:
        ax.axhline(y=float(h), linestyle='--')
    for v in vline:
        ax.axvline(x=float(v), ymin=0, ymax=1, linestyle='--')
    for d in data:
        try:
            label = next(namelist)
        except StopIteration:
            label = False
        for subdata in d[1:]:
            x = subdata[0]
            y = subdata[1]
            if not label:
                label = d[0]
                suf = ":".join([str(x), str(y)])
                lab = label+suf
            else:
                lab = label
            x_data = subdata[2]
            y_data = subdata[3]
            if fmt == 'xy':
                plt.plot(x_data, y_data,
                         label=lab,)
            elif fmt == 'xydy':
                dy = subdata[4]
                plt.plot(x_data, y_data,
                         label=lab,)
                up = y_data+dy
                down = y_data-dy
                plt.fill_between(
                        x_data, up, down,
                        alpha=0.2,
                        linewidth=0
                        )
            elif fmt == 'xydx':
                dx = subdata[4]
                plt.errorbar(x_data, y_data,
                             xerr=dx,
                             capsize=4, capthick=2,
                             label=lab,
                             )
            elif fmt == 'xydxdy':
                dx = subdata[4]
                dy = subdata[5]
                plt.errorbar(x_data, y_data,
                             xerr=dx, yerr=dy,
                             capsize=4, capthick=2,
                             label=lab,
                             )
            if is_log[0]:
                plt.xscale('log')
            if is_log[1]:
                plt.yscale('log')
    if legend:
        ncol = max([1, len(data)//3])
        plt.legend(ncol=ncol)
    return


def main():
    '''
    Main function.
    '''
    parser = ap.ArgumentParser(description='Script to plot a list of files.')
    parser.add_argument('-sf', '--separated-files', dest='sf',
                        action='store_true',
                        help='Plot in separated windows based on filename.')
    parser.add_argument('-sc', '--separated-columns', dest='sc',
                        action='store_true',
                        help='Plot in separated windows based on columns.')
    parser.add_argument('-sy', '--symbols', dest='sy',
                        action='store_true',
                        help='Use symbols and not lines')
    parser.add_argument('-fmt', '--fmt', dest='fmt',
                        default='xy',
                        help='Format of the plot (xy, xydy, xydxdy, xydx). [default = xy]')
    parser.add_argument('-i', '--input', dest='input',
                        nargs='+', action='append',
                        help='File name followed by columns and optionally lines to skip.')
    parser.add_argument('-n', '--names', dest='names',
                        nargs='+', action='append',
                        default=[],
                        help='Names for the legend.')
    parser.add_argument('-l', '--loglog', dest='is_log_xy',
                        action='store_true',
                        help='Plot in loglog scale.')
    parser.add_argument('-lx', '--logx', dest='is_log_x',
                        action='store_true',
                        help='Plot in semilog scale (x).')
    parser.add_argument('-ly', '--logy', dest='is_log_y',
                        action='store_true',
                        help='Plot in semilog scale (y).')
    parser.add_argument('-t', '--title', dest='ttl', default='Your nice graph',
                        type=str, help='Title of the plot.')
    parser.add_argument('-xl', '--xlabel', dest='xlab',
                        default=False, help='label for x')
    parser.add_argument('-yl', '--ylabel', dest='ylab',
                        default=False, help='label for y')
    parser.add_argument('-xs', '--xscale', dest='xsca',
                        type=float, default=1, help='scale for x')
    parser.add_argument('-ys', '--yscale', dest='ysca',
                        type=float, default=1, help='scale for y')
    parser.add_argument('-nl', '--no-legend', dest='no_legend', action='store_true',
                        help='removes the legend')
    parser.add_argument('-c', '--colors', dest='colors', nargs='*',
                        help='A list of colors to use instead of default')
    parser.add_argument('-gr', '--gradient', dest='grad',
                        type=int, default=0,
                        help='use n colors from aquatic gradient (thanks Florent)')
    parser.add_argument('-sg', '--savitsky-golay',
                        dest='SG', type=int, default=0,
                        help='Savitsky-golay window (default=0=none)')
    parser.add_argument('--hline', dest='hline', nargs='+',
                        action='append',
                        help='Coordinate of horizontal lines to add')
    parser.add_argument('--vline', dest='vline', nargs='+',
                        action='append',
                        help='Coordinate of vertical lines to add')

    args = parser.parse_args()

    sep_files = args.sf
    sep_col = args.sc
    sy = args.sy
    fmt = args.fmt
    inpt = args.input
    graph_title = args.ttl
    xlab = args.xlab
    ylab = args.ylab
    xsca = args.xsca
    ysca = args.ysca
    hline = args.hline[0] if args.hline else []
    vline = args.vline[0] if args.vline else []

    is_log_xy = args.is_log_xy
    is_log_x = args.is_log_x
    is_log_y = args.is_log_y
    if is_log_xy:
        is_log = (1, 1)
    elif is_log_x:
        is_log = (1, 0)
    elif is_log_y:
        is_log = (0, 1)
    else:
        is_log = (0, 0)

    sg = args.SG
    if args.names:
        names = args.names[0]
    else:
        names = ['']
    legend = not args.no_legend

    if not inpt:
        sys.exit('No file provided as input source.')
    else:
        for i in inpt:
            if not os.path.isfile(i[0]):
                sys.exit('Did not find file '+i[0]+'.')

    if fmt == 'xy':
        regex = re.compile(r'\d+:\d+')
    elif fmt == 'xydy' or fmt == 'xydx':
        regex = re.compile(r'\d+:\d+:\d+')
    elif fmt == 'xydxdy':
        regex = re.compile(r'\d+:\d+:\d+:\d+')
    else:
        sys.exit('Unknown fmt in -fmt option.')

    try:
        plt.style.use('Old')
    except Exception:
        pass
    regex_sk = re.compile(r'^\d+$')
    mycolors = ['000000', '888888', 'CCCCCC']
    mylinestyles = ['-', '--', '-.', ':']
    mymarkers = ['o', 's', 'v', '^']
    make_new_cycler = False
    if args.colors:
        mycolors = args.colors
        make_new_cycler = True
    elif args.grad:
        mycolors = []
        col1 = np.array([2., 242., 245.])/255.
        col2 = np.array([252., 44., 255.])/255.
        for i in range(args.grad):
            x = i/(args.grad-1)
            color = (1-x)*col1 + x*col2
            mycolors.append(color)
        make_new_cycler = True

    if make_new_cycler:
        mycycler = (plt.cycler(color=mycolors) * (
            plt.cycler(linestyle=mylinestyles) + plt.cycler(marker=mymarkers)
                )
            )
        plt.rcParams['axes.prop_cycle'] = mycycler

    for c in mycycler:
        print(c)
    columns_list = []
    data = []

    for i in inpt:
        fle = i[0]
        columns_list = []
        for column in i[1:]:
            bingo = regex.findall(column)
            if bingo:
                columns_list.append(bingo)
        temp = regex_sk.findall(i[-1])
        if temp:
            skip = int(temp[0])
        else:
            skip = 0

        data.append(read_columns(fle, columns_list, fmt, skip, xsca, ysca, sg))

    if sep_col:
        fig, axes = plot_sep_col(data, fmt, is_log, legend, sy, hline, vline)
    elif sep_files:
        fig, axes = plot_sep_fil(data, fmt, is_log, legend, sy, hline, vline)
    else:
        plot_data(data, fmt, is_log, legend, names, sy, hline, vline)

    plt.xlabel(xlab)
    plt.ylabel(ylab)
    plt.title(graph_title)
    plt.show()
    return


if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        raise SystemExit("User interruption.")
