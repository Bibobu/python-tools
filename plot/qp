#!/usr/bin/env python3
# -*- coding: utf-8 -*-

'''
My module to plot a serie of files.
'''

import os
import sys
import re
import logging
import argparse as ap

import numpy as np
from scipy.signal import savgol_filter
from matplotlib import pyplot as plt

try:
    plt.style.use('Old')
except Exception:
    pass

SCREEN_WIDTH = 1920
SCREEN_HEIGHT = 1080
FIG_WIDTH = SCREEN_WIDTH/2./96.
FIG_HEIGHT = SCREEN_HEIGHT/96.


class Toplot:
    def __init__(self, file="data.txt", xdata=0, ydata=0, xcol=0, ycol=0):
        self.file = file
        self.xdata = xdata
        self.ydata = ydata
        self.xerr = 0
        self.yerr = 0
        self.xcol = xcol
        self.ycol = ycol
        self.label = '-'.join([self.file, str(self.xcol), str(self.ycol)])

    def add_error(self, ax, err):
        if ax == 'dx':
            self.xerr = err
        elif ax == 'dy':
            self.yerr = err
        else:
            logging.info('Unknown error axis.\n')

    def add_label(self, label):
        self.label = label


def check_log_scales(args):
    logx, logy = False, False
    if args.is_log_xy:
        logx, logy = True, True
    elif args.is_log_x:
        logx = True
    elif args.is_log_y:
        logy = True

    return (logx, logy)


def change_font(fontsize):
    plt.rcParams['font.size'] = fontsize
    plt.rcParams['axes.labelsize'] = fontsize
    plt.rcParams['axes.titlesize'] = fontsize
    plt.rcParams['figure.labelsize'] = fontsize
    plt.rcParams['legend.fontsize'] = fontsize
    plt.rcParams['xtick.labelsize'] = fontsize
    plt.rcParams['ytick.labelsize'] = fontsize


def read_columns(fle, columns_list, fmt, skip, xsca, ysca, sg):
    '''
    Reads input file and returns a list
    containing columns' numbers followed
    by array slices containing data.
    '''
    data = np.loadtxt(fle, skiprows=skip)
    for pair in columns_list:
        partition = pair[0].split(':')
        x = int(partition[0])
        y = int(partition[1])
        if fmt == 'xydy':
            dy = int(partition[2])
        elif fmt == 'xydx':
            dx = int(partition[2])
        elif fmt == 'xydxdy':
            dx = int(partition[2])
            dy = int(partition[3])
        x_data = xsca*data[:, x-1]
        y_data = ysca*data[:, y-1]
        if sg:
            y_data = savgol_filter(y_data, sg, 3)

        curve = Toplot(file=fle, xdata=x_data, ydata=y_data, xcol=x, ycol=y)
        if fmt == 'xydy':
            dy_data = ysca*data[:, dy-1]
            curve.add_error('dy', dy_data)
        elif fmt == 'xydx':
            dx_data = xsca*data[:, dx-1]
            curve.add_error('dx', dx_data)
        elif fmt == 'xydxdy':
            dx_data = xsca*data[:, dx-1]
            dy_data = ysca*data[:, dy-1]
            curve.add_error('dx', dx_data)
            curve.add_error('dy', dy_data)

    return curve


def plot_data(data, fmt, is_log, legend, hline, vline, sf, sc):
    fig = plt.figure(figsize=(FIG_WIDTH, FIG_HEIGHT))
    files, nfiles, maxcol = [], 1, 1
    if sf or sc:
        if sf:
            files = list(set([d.file for d in data]))
        else:
            files = list(set([''.join([str(d.xcol), str(d.ycol)]) for d in data]))
        nfiles = len(files)
        if nfiles % 2 == 0:
            maxcol = 2
        if nfiles % 3 == 0:
            maxcol = 3

    axes = fig.subplots(nfiles//maxcol, maxcol, sharex=True, sharey=True)
    # This is because subplots returns inconsistent type (either list or ax)
    if not sf and not sc:
        axes = [axes]

    for d in data:
        # Choose the right subplot if any
        if sf:
            ax = axes[files.index(d.file)]
        elif sc:
            ax = axes[files.index(''.join([str(d.xcol), str(d.ycol)]))]
        else:
            ax = axes[0]

        # Very special cases
        if fmt == 'xydxdy':
            ax.errorbar(d.xdata, d.ydata,
                        xerr=d.xerr, yerr=d.yerr,
                        capsize=4, capthick=2,
                        label=d.lab,
                        )
        else:
            ax.plot(d.xdata, d.ydata,
                    label=d.label,)

            if fmt == 'xydy':
                up = d.ydata+d.yerr
                down = d.ydata-d.yerr
                ax.fill_between(
                        d.xdata, up, down,
                        alpha=0.2,
                        linewidth=0
                        )
            elif fmt == 'xydx':
                right = d.xdata+d.xerr
                left = d.xdata-d.xerr
                ax.fill_betweenx(
                        d.ydata, right, left,
                        alpha=0.2,
                        linewidth=0
                        )
    for ax in axes:
        for h in hline:
            ax.axhline(y=float(h), linestyle='--')
        for v in vline:
            ax.axvline(x=float(v), ymin=0, ymax=1, linestyle='--')
        if is_log[0]:
            ax.xscale('log')
        if is_log[1]:
            ax.yscale('log')
        if legend:
            # ncol = max([1, len(data)//3])
            ax.legend()
    return


def main():
    '''
    Main function.
    '''
    parser = ap.ArgumentParser(description='Script to plot a list of files.')
    parser.add_argument('-sf', '--separated-files', dest='sf',
                        action='store_true',
                        help='Plot in separated windows based on filename.')
    parser.add_argument('-sc', '--separated-columns', dest='sc',
                        action='store_true',
                        help='Plot in separated windows based on columns.')
    parser.add_argument('-xkcd',
                        action='store_true',
                        help='XKCD style. For placeholders and fun.')
    parser.add_argument('-fmt', '--fmt', dest='fmt',
                        default='xy',
                        help='Format (xy, xydy, xydxdy, xydx). [default = xy]')
    parser.add_argument('-i', '--input', dest='input',
                        nargs='+', action='append',
                        help='Filename with columns and lines to skip if any.')
    parser.add_argument('-n', '--names', dest='names',
                        nargs='+', action='extend',
                        default=[],
                        help='Names for the legend.')
    parser.add_argument('-l', '--loglog', dest='is_log_xy',
                        action='store_true',
                        help='Plot in loglog scale.')
    parser.add_argument('-lx', '--logx', dest='is_log_x',
                        action='store_true',
                        help='Plot in semilog scale (x).')
    parser.add_argument('-ly', '--logy', dest='is_log_y',
                        action='store_true',
                        help='Plot in semilog scale (y).')
    parser.add_argument('-nm', '--nomarker', dest='nomarker',
                        action='store_true',
                        help='Remove markers')
    parser.add_argument('--noline', dest='noline',
                        action='store_true',
                        help='Remove lines')
    parser.add_argument('-t', '--title', dest='ttl', default='',
                        type=str, help='Title of the plot.')
    parser.add_argument('-xl', '--xlabel', dest='xlab',
                        default=False, help='label for x')
    parser.add_argument('-yl', '--ylabel', dest='ylab',
                        default=False, help='label for y')
    parser.add_argument('-xs', '--xscale', dest='xsca',
                        type=float, default=1, help='scale for x')
    parser.add_argument('-ys', '--yscale', dest='ysca',
                        type=float, default=1, help='scale for y')
    parser.add_argument('-fs', '--fsize', dest='fontsize',
                        type=int, default=0, help='General fontsize')
    parser.add_argument('-nl', '--no-legend', dest='no_legend',
                        action='store_true',
                        help='removes the legend')
    parser.add_argument('-c', '--colors', dest='colors', nargs='+',
                        help='A list of colors to use instead of default')
    parser.add_argument('-gr', '--gradient', dest='grad',
                        type=int, default=0,
                        help='use n colors from aquatic gradient (thks F.G)')
    parser.add_argument('-sg', '--savitsky-golay',
                        dest='SG', type=int, default=0,
                        help='Savitsky-golay window (default=0=none)')
    parser.add_argument('--hline', dest='hline', nargs='+',
                        default=[], action='extend',
                        help='Coordinate of horizontal lines to add')
    parser.add_argument('--vline', dest='vline', nargs='+',
                        default=[], action='extend',
                        help='Coordinate of vertical lines to add')
    parser.add_argument('-o', '--output', dest='output',
                        default=None,
                        help='Name of an output file (no screen show)')

    args = parser.parse_args()

    sf = args.sf
    sc = args.sc
    xkcd = args.xkcd
    fmt = args.fmt
    inpt = args.input
    graph_title = args.ttl
    xlab = args.xlab
    ylab = args.ylab
    xsca = args.xsca
    ysca = args.ysca
    hline = args.hline
    vline = args.vline
    fontsize = args.fontsize
    sg = args.SG

    legend = not args.no_legend

    is_log = check_log_scales(args)

    if not inpt:
        sys.exit('No file provided as input source.')
    else:
        for i in inpt:
            if not os.path.isfile(i[0]):
                sys.exit('Did not find file '+i[0]+'.')

    if fmt == 'xy':
        regex = re.compile(r'\d+:\d+')
    elif fmt == 'xydy' or fmt == 'xydx':
        regex = re.compile(r'\d+:\d+:\d+')
    elif fmt == 'xydxdy':
        regex = re.compile(r'\d+:\d+:\d+:\d+')
    else:
        sys.exit('Unknown fmt in -fmt option.')

    mycolors = ['#000000', '#888888', '#CCCCCC']
    mylinestyles = ['-', '--', '-.', ':']
    mymarkers = ['o', 's', 'v', '^']
    make_new_cycler = False
    if args.colors:
        mycolors = args.colors
        make_new_cycler = True
    elif args.grad:
        mycolors = []
        col1 = np.array([2., 242., 245.])/255.
        col2 = np.array([252., 44., 255.])/255.
        for i in range(args.grad):
            x = i/(args.grad-1)
            color = (1-x)*col1 + x*col2
            mycolors.append(color)
        make_new_cycler = True
    if args.nomarker:
        mymarkers = 4*['']
        make_new_cycler = True
    if args.noline:
        mylinestyles = 4*['']
        make_new_cycler = True

    if make_new_cycler:
        mycycler = (plt.cycler(color=mycolors) * (
            plt.cycler(linestyle=mylinestyles) + plt.cycler(marker=mymarkers)
                )
            )
        plt.rcParams['axes.prop_cycle'] = mycycler

    if fontsize:
        change_font(fontsize)

    columns_list = []
    data = []

    regex_sk = re.compile(r'^\d+$')
    for i in inpt:
        fle = i[0]
        columns_list = []
        for column in i[1:]:
            bingo = regex.findall(column)
            if bingo:
                columns_list.append(bingo)
        temp = regex_sk.findall(i[-1])
        if temp:
            skip = int(temp[0])
        else:
            skip = 0

        data.append(read_columns(fle, columns_list, fmt, skip, xsca, ysca, sg))

    # Change labels if needed
    if args.names:
        for i, n in enumerate(args.names):
            data[i].label = n

    if xkcd:
        plt.xkcd()

    plot_data(data, fmt, is_log, legend, hline, vline, sf, sc)

    fig = plt.gcf()
    fig.supxlabel(xlab)
    fig.supylabel(ylab)
    plt.title(graph_title)
    fig.tight_layout()

    if args.output:
        plt.savefig(''.join([args.output, '.png']), dpi=plt.gcf().dpi)
    else:
        plt.show()

    return


if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        raise SystemExit("User interruption.")
